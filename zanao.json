{
	"type":"WEB",
	"other":[
		"Url: javascript:var HB_f45b941 = function() {\n    function _getType(args) {\n        var type = 0;\n        if (typeof args === 'string') {\n            type = 2;\n        } else if (typeof args === 'number') {\n            if (Math.floor(args) === args) {\n                type = 6;\n            } else {\n                type = 7;\n            }\n        } else if (typeof args === 'boolean') {\n            type = 1;\n        } else if (typeof args === 'function') {\n            type = 3;\n        } else if (args instanceof Array) {\n            type = 5;\n        } else if (typeof args === 'object') {\n            type = 4;\n        }\n        return type;\n    };\n    function _parseFunction(obj, name, callback) {\n        if (typeof obj === 'function') {\n            callback[name] = obj;\n            obj = '[Function]::' + name;\n            return;\n        }\n        if (typeof obj !== 'object') {\n            return;\n        }\n        for (var p in obj) {\n            switch (typeof obj[p]) {\n                case 'object':\n                    var ret = name ? name + '_' + p : p;\n                    _parseFunction(obj[p], ret, callback);\n                    break;\n                case 'function':\n                    var ret = name ? name + '_' + p : p;\n                    callback[ret] = (obj[p]);\n                    obj[p] = '[Function]::' + ret;\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n    function _err(s) {\n        console.error(s);\n    };\n    function _log(s) {\n        console.log(s);\n    };\n    function _getId() {\n        return Math.floor(Math.random() * (1 << 12));\n    };\n    function _callJava(id, module, method, args) {\n        if(typeof args === 'object' && args.length > 0) {\n           if(args[0].value.success == undefined)\n               args[0].value.success = '[Function]::' + args[0].name + '_success';\n           if(args[0].value.fail == undefined)\n               args[0].value.fail = '[Function]::' + args[0].name + '_fail';\n           if(args[0].value.complete == undefined)\n               args[0].value.complete = '[Function]::' + args[0].name + '_complete';\n        }\n        var req = {\n            id: id,\n            module: module,\n            method: method,\n            parameters: args\n        };\n        var ttest = ((window[module])[method])(JSON.stringify(req));\n        var tttest = JSON.parse(ttest);\n        return tttest;\n    };\n    this.onHBReady = function() {\n        try {\n            var ready = window.onHBReady;\n            if (ready && typeof(ready) === 'function') {\n                ready();\n            } else {\n                var readyEvent = document.createEvent('Events');\n                readyEvent.initEvent('onHBReady');\n                document.dispatchEvent(readyEvent);\n            }\n        } catch (e) {\n            console.error(e);\n        };\n    };\n    HB_f45b941.prototype.Network = {\n        decryptSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.decryptSyncCallback)\n                    HB.Network.decryptSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.decryptSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'decryptSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        downloadFile: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.downloadFileCallback)\n                    HB.Network.downloadFileCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.downloadFileCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'downloadFile', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        easyRequest: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.easyRequestCallback)\n                    HB.Network.easyRequestCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.easyRequestCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'easyRequest', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        encryptSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.encryptSyncCallback)\n                    HB.Network.encryptSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.encryptSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'encryptSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getNetworkState: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.getNetworkStateCallback)\n                    HB.Network.getNetworkStateCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.getNetworkStateCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'getNetworkState', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getSign: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.getSignCallback)\n                    HB.Network.getSignCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.getSignCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'getSign', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getSignSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.getSignSyncCallback)\n                    HB.Network.getSignSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.getSignSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'getSignSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        request: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.requestCallback)\n                    HB.Network.requestCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.requestCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'request', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        uploadFile: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Network.uploadFileCallback)\n                    HB.Network.uploadFileCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Network.uploadFileCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Network', 'uploadFile', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n    HB_f45b941.prototype.Device = {\n        appInit: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.appInitCallback)\n                    HB.Device.appInitCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.appInitCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'appInit', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        appInitSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.appInitSyncCallback)\n                    HB.Device.appInitSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.appInitSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'appInitSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        checkNotifySetting: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.checkNotifySettingCallback)\n                    HB.Device.checkNotifySettingCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.checkNotifySettingCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'checkNotifySetting', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        checkNotifySettingSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.checkNotifySettingSyncCallback)\n                    HB.Device.checkNotifySettingSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.checkNotifySettingSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'checkNotifySettingSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        checkPermission: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.checkPermissionCallback)\n                    HB.Device.checkPermissionCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.checkPermissionCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'checkPermission', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        checkPermissionSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.checkPermissionSyncCallback)\n                    HB.Device.checkPermissionSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.checkPermissionSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'checkPermissionSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        checkPermissions: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.checkPermissionsCallback)\n                    HB.Device.checkPermissionsCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.checkPermissionsCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'checkPermissions', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        checkPermissionsSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.checkPermissionsSyncCallback)\n                    HB.Device.checkPermissionsSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.checkPermissionsSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'checkPermissionsSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        cleanHyBridge: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.cleanHyBridgeCallback)\n                    HB.Device.cleanHyBridgeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.cleanHyBridgeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'cleanHyBridge', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        floatingToast: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.floatingToastCallback)\n                    HB.Device.floatingToastCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.floatingToastCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'floatingToast', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getAppInfo: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.getAppInfoCallback)\n                    HB.Device.getAppInfoCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.getAppInfoCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'getAppInfo', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getAppInfoSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.getAppInfoSyncCallback)\n                    HB.Device.getAppInfoSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.getAppInfoSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'getAppInfoSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getClipboard: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.getClipboardCallback)\n                    HB.Device.getClipboardCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.getClipboardCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'getClipboard', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getClipboardSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.getClipboardSyncCallback)\n                    HB.Device.getClipboardSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.getClipboardSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'getClipboardSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getDisplayMetrics: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.getDisplayMetricsCallback)\n                    HB.Device.getDisplayMetricsCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.getDisplayMetricsCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'getDisplayMetrics', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getLatestHyBridge: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.getLatestHyBridgeCallback)\n                    HB.Device.getLatestHyBridgeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.getLatestHyBridgeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'getLatestHyBridge', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        injectJs: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.injectJsCallback)\n                    HB.Device.injectJsCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.injectJsCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'injectJs', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        isNetworkAvailable: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.isNetworkAvailableCallback)\n                    HB.Device.isNetworkAvailableCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.isNetworkAvailableCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'isNetworkAvailable', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        isX5: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.isX5Callback)\n                    HB.Device.isX5Callback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.isX5Callback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'isX5', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        isX5Sync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.isX5SyncCallback)\n                    HB.Device.isX5SyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.isX5SyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'isX5Sync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        navigateToNotificationSettings: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.navigateToNotificationSettingsCallback)\n                    HB.Device.navigateToNotificationSettingsCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.navigateToNotificationSettingsCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'navigateToNotificationSettings', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        phoneCall: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.phoneCallCallback)\n                    HB.Device.phoneCallCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.phoneCallCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'phoneCall', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        requestPermissions: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.requestPermissionsCallback)\n                    HB.Device.requestPermissionsCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.requestPermissionsCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'requestPermissions', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        restartApp: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.restartAppCallback)\n                    HB.Device.restartAppCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.restartAppCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'restartApp', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setClipboard: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.setClipboardCallback)\n                    HB.Device.setClipboardCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.setClipboardCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'setClipboard', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setClipboardSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.setClipboardSyncCallback)\n                    HB.Device.setClipboardSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.setClipboardSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'setClipboardSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setHyBridgeVersion: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.setHyBridgeVersionCallback)\n                    HB.Device.setHyBridgeVersionCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.setHyBridgeVersionCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'setHyBridgeVersion', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        updateHyBridge: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.updateHyBridgeCallback)\n                    HB.Device.updateHyBridgeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.updateHyBridgeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'updateHyBridge', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        updateNativeApp: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Device.updateNativeAppCallback)\n                    HB.Device.updateNativeAppCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Device.updateNativeAppCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Device', 'updateNativeApp', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n    HB_f45b941.prototype.Interface = {\n        checkLevel: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.checkLevelCallback)\n                    HB.Interface.checkLevelCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.checkLevelCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'checkLevel', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        dialog: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.dialogCallback)\n                    HB.Interface.dialogCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.dialogCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'dialog', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        exitApp: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.exitAppCallback)\n                    HB.Interface.exitAppCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.exitAppCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'exitApp', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getCurRefreshBgImage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.getCurRefreshBgImageCallback)\n                    HB.Interface.getCurRefreshBgImageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.getCurRefreshBgImageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'getCurRefreshBgImage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getCurRefreshBgImageSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.getCurRefreshBgImageSyncCallback)\n                    HB.Interface.getCurRefreshBgImageSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.getCurRefreshBgImageSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'getCurRefreshBgImageSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getCurrentUrl: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.getCurrentUrlCallback)\n                    HB.Interface.getCurrentUrlCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.getCurrentUrlCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'getCurrentUrl', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getCurrentUrlSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.getCurrentUrlSyncCallback)\n                    HB.Interface.getCurrentUrlSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.getCurrentUrlSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'getCurrentUrlSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getNightMode: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.getNightModeCallback)\n                    HB.Interface.getNightModeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.getNightModeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'getNightMode', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getNightModeSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.getNightModeSyncCallback)\n                    HB.Interface.getNightModeSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.getNightModeSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'getNightModeSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getPageObject: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.getPageObjectCallback)\n                    HB.Interface.getPageObjectCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.getPageObjectCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'getPageObject', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        homeDestroy: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.homeDestroyCallback)\n                    HB.Interface.homeDestroyCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.homeDestroyCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'homeDestroy', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        homeDestroySync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.homeDestroySyncCallback)\n                    HB.Interface.homeDestroySyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.homeDestroySyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'homeDestroySync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        hrefTest: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.hrefTestCallback)\n                    HB.Interface.hrefTestCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.hrefTestCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'hrefTest', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        isHomePage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.isHomePageCallback)\n                    HB.Interface.isHomePageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.isHomePageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'isHomePage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        isHomePageSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.isHomePageSyncCallback)\n                    HB.Interface.isHomePageSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.isHomePageSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'isHomePageSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        lengthTest: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.lengthTestCallback)\n                    HB.Interface.lengthTestCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.lengthTestCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'lengthTest', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        motionHide: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.motionHideCallback)\n                    HB.Interface.motionHideCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.motionHideCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'motionHide', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        motionShow: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.motionShowCallback)\n                    HB.Interface.motionShowCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.motionShowCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'motionShow', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        navigateBack: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.navigateBackCallback)\n                    HB.Interface.navigateBackCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.navigateBackCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'navigateBack', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        navigateTo: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.navigateToCallback)\n                    HB.Interface.navigateToCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.navigateToCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'navigateTo', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        navigateToCourse: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.navigateToCourseCallback)\n                    HB.Interface.navigateToCourseCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.navigateToCourseCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'navigateToCourse', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        navigateToMarket: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.navigateToMarketCallback)\n                    HB.Interface.navigateToMarketCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.navigateToMarketCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'navigateToMarket', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        navigateToMarketSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.navigateToMarketSyncCallback)\n                    HB.Interface.navigateToMarketSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.navigateToMarketSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'navigateToMarketSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        nightFollowSystem: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.nightFollowSystemCallback)\n                    HB.Interface.nightFollowSystemCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.nightFollowSystemCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'nightFollowSystem', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        nightFollowSystemSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.nightFollowSystemSyncCallback)\n                    HB.Interface.nightFollowSystemSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.nightFollowSystemSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'nightFollowSystemSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        redirectTo: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.redirectToCallback)\n                    HB.Interface.redirectToCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.redirectToCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'redirectTo', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        saveImage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.saveImageCallback)\n                    HB.Interface.saveImageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.saveImageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'saveImage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        saveImageBlobToPhotosAlbum: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.saveImageBlobToPhotosAlbumCallback)\n                    HB.Interface.saveImageBlobToPhotosAlbumCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.saveImageBlobToPhotosAlbumCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'saveImageBlobToPhotosAlbum', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        saveImageUrlToPhotosAlbum: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.saveImageUrlToPhotosAlbumCallback)\n                    HB.Interface.saveImageUrlToPhotosAlbumCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.saveImageUrlToPhotosAlbumCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'saveImageUrlToPhotosAlbum', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setAppBadge: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setAppBadgeCallback)\n                    HB.Interface.setAppBadgeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setAppBadgeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setAppBadge', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setBackCallback: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setBackCallbackCallback)\n                    HB.Interface.setBackCallbackCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setBackCallbackCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setBackCallback', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setBackCallbackSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setBackCallbackSyncCallback)\n                    HB.Interface.setBackCallbackSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setBackCallbackSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setBackCallbackSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setMenu: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setMenuCallback)\n                    HB.Interface.setMenuCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setMenuCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setMenu', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setNightMode: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setNightModeCallback)\n                    HB.Interface.setNightModeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setNightModeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setNightMode', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setNightModeCallback: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setNightModeCallbackCallback)\n                    HB.Interface.setNightModeCallbackCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setNightModeCallbackCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setNightModeCallback', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setNightModeCallbackSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setNightModeCallbackSyncCallback)\n                    HB.Interface.setNightModeCallbackSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setNightModeCallbackSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setNightModeCallbackSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setNightModeSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setNightModeSyncCallback)\n                    HB.Interface.setNightModeSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setNightModeSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setNightModeSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setPrefersColorScheme: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setPrefersColorSchemeCallback)\n                    HB.Interface.setPrefersColorSchemeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setPrefersColorSchemeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setPrefersColorScheme', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setPrefersColorSchemeSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setPrefersColorSchemeSyncCallback)\n                    HB.Interface.setPrefersColorSchemeSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setPrefersColorSchemeSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setPrefersColorSchemeSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setPullAble: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setPullAbleCallback)\n                    HB.Interface.setPullAbleCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setPullAbleCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setPullAble', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setPullAbleSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setPullAbleSyncCallback)\n                    HB.Interface.setPullAbleSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setPullAbleSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setPullAbleSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setPullDownRefreshCallback: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setPullDownRefreshCallbackCallback)\n                    HB.Interface.setPullDownRefreshCallbackCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setPullDownRefreshCallbackCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setPullDownRefreshCallback', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setRefreshBgImage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setRefreshBgImageCallback)\n                    HB.Interface.setRefreshBgImageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setRefreshBgImageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setRefreshBgImage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setRefreshBgImageSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setRefreshBgImageSyncCallback)\n                    HB.Interface.setRefreshBgImageSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setRefreshBgImageSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setRefreshBgImageSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setTab: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setTabCallback)\n                    HB.Interface.setTabCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setTabCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setTab', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setTabBarBadge: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setTabBarBadgeCallback)\n                    HB.Interface.setTabBarBadgeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setTabBarBadgeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setTabBarBadge', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setTopBar: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setTopBarCallback)\n                    HB.Interface.setTopBarCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setTopBarCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setTopBar', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setTopBarCallBackInHome: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setTopBarCallBackInHomeCallback)\n                    HB.Interface.setTopBarCallBackInHomeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setTopBarCallBackInHomeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setTopBarCallBackInHome', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setTopBarCallback: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setTopBarCallbackCallback)\n                    HB.Interface.setTopBarCallbackCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setTopBarCallbackCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setTopBarCallback', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setTopBarInHome: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.setTopBarInHomeCallback)\n                    HB.Interface.setTopBarInHomeCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.setTopBarInHomeCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'setTopBarInHome', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        stopPullDownRefresh: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.stopPullDownRefreshCallback)\n                    HB.Interface.stopPullDownRefreshCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.stopPullDownRefreshCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'stopPullDownRefresh', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        switchTab: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.switchTabCallback)\n                    HB.Interface.switchTabCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.switchTabCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'switchTab', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        toast: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.toastCallback)\n                    HB.Interface.toastCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.toastCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'toast', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        wxLaunchMiniProgram: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Interface.wxLaunchMiniProgramCallback)\n                    HB.Interface.wxLaunchMiniProgramCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Interface.wxLaunchMiniProgramCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Interface', 'wxLaunchMiniProgram', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n    HB_f45b941.prototype.user = {\n        WXShare: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.WXShareCallback)\n                    HB.user.WXShareCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.WXShareCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'WXShare', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        isWXInstalledSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.isWXInstalledSyncCallback)\n                    HB.user.isWXInstalledSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.isWXInstalledSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'isWXInstalledSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        launchMiniApp: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.launchMiniAppCallback)\n                    HB.user.launchMiniAppCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.launchMiniAppCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'launchMiniApp', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        requestPayment: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.requestPaymentCallback)\n                    HB.user.requestPaymentCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.requestPaymentCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'requestPayment', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        wxCustomerServiceChat: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.wxCustomerServiceChatCallback)\n                    HB.user.wxCustomerServiceChatCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.wxCustomerServiceChatCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'wxCustomerServiceChat', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        wxLogin: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.wxLoginCallback)\n                    HB.user.wxLoginCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.wxLoginCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'wxLogin', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        wxPay: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.wxPayCallback)\n                    HB.user.wxPayCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.wxPayCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'wxPay', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        wxShare: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.user.wxShareCallback)\n                    HB.user.wxShareCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.user.wxShareCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'user', 'wxShare', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n    HB_f45b941.prototype.Storage = {\n        clearCache: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.clearCacheCallback)\n                    HB.Storage.clearCacheCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.clearCacheCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'clearCache', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        clearDownloadFile: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.clearDownloadFileCallback)\n                    HB.Storage.clearDownloadFileCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.clearDownloadFileCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'clearDownloadFile', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        clearMemory: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.clearMemoryCallback)\n                    HB.Storage.clearMemoryCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.clearMemoryCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'clearMemory', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        clearMemorySync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.clearMemorySyncCallback)\n                    HB.Storage.clearMemorySyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.clearMemorySyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'clearMemorySync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        clearStorage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.clearStorageCallback)\n                    HB.Storage.clearStorageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.clearStorageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'clearStorage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        clearStorageSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.clearStorageSyncCallback)\n                    HB.Storage.clearStorageSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.clearStorageSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'clearStorageSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getMemory: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.getMemoryCallback)\n                    HB.Storage.getMemoryCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.getMemoryCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'getMemory', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getMemorySync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.getMemorySyncCallback)\n                    HB.Storage.getMemorySyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.getMemorySyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'getMemorySync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getPreLoadData: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.getPreLoadDataCallback)\n                    HB.Storage.getPreLoadDataCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.getPreLoadDataCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'getPreLoadData', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getPreLoadDataSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.getPreLoadDataSyncCallback)\n                    HB.Storage.getPreLoadDataSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.getPreLoadDataSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'getPreLoadDataSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getSDStorage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.getSDStorageCallback)\n                    HB.Storage.getSDStorageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.getSDStorageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'getSDStorage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getStorage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.getStorageCallback)\n                    HB.Storage.getStorageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.getStorageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'getStorage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        getStorageSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.getStorageSyncCallback)\n                    HB.Storage.getStorageSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.getStorageSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'getStorageSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setMemory: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.setMemoryCallback)\n                    HB.Storage.setMemoryCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.setMemoryCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'setMemory', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setMemorySync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.setMemorySyncCallback)\n                    HB.Storage.setMemorySyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.setMemorySyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'setMemorySync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setStorage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.setStorageCallback)\n                    HB.Storage.setStorageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.setStorageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'setStorage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setStorageSync: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Storage.setStorageSyncCallback)\n                    HB.Storage.setStorageSyncCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Storage.setStorageSyncCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Storage', 'setStorageSync', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n    HB_f45b941.prototype.Photo = {\n        downloadImage: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Photo.downloadImageCallback)\n                    HB.Photo.downloadImageCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Photo.downloadImageCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Photo', 'downloadImage', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        qrScan: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Photo.qrScanCallback)\n                    HB.Photo.qrScanCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Photo.qrScanCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Photo', 'qrScan', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        selectImages: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Photo.selectImagesCallback)\n                    HB.Photo.selectImagesCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Photo.selectImagesCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Photo', 'selectImages', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        showImages: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Photo.showImagesCallback)\n                    HB.Photo.showImagesCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Photo.showImagesCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Photo', 'showImages', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        takePhoto: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Photo.takePhotoCallback)\n                    HB.Photo.takePhotoCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Photo.takePhotoCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Photo', 'takePhoto', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        uploadImageToServer: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Photo.uploadImageToServerCallback)\n                    HB.Photo.uploadImageToServerCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Photo.uploadImageToServerCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Photo', 'uploadImageToServer', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n    HB_f45b941.prototype.Event = {\n        X5Test: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.X5TestCallback)\n                    HB.Event.X5TestCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.X5TestCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'X5Test', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        emit: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.emitCallback)\n                    HB.Event.emitCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.emitCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'emit', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        off: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.offCallback)\n                    HB.Event.offCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.offCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'off', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        on: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.onCallback)\n                    HB.Event.onCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.onCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'on', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setAppOnHide: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.setAppOnHideCallback)\n                    HB.Event.setAppOnHideCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.setAppOnHideCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'setAppOnHide', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setAppOnShow: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.setAppOnShowCallback)\n                    HB.Event.setAppOnShowCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.setAppOnShowCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'setAppOnShow', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setOnShow: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.setOnShowCallback)\n                    HB.Event.setOnShowCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.setOnShowCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'setOnShow', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setPageOnHide: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.setPageOnHideCallback)\n                    HB.Event.setPageOnHideCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.setPageOnHideCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'setPageOnHide', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        setPageOnShow: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.setPageOnShowCallback)\n                    HB.Event.setPageOnShowCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.setPageOnShowCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'setPageOnShow', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        unsetAppOnHide: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.unsetAppOnHideCallback)\n                    HB.Event.unsetAppOnHideCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.unsetAppOnHideCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'unsetAppOnHide', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        unsetAppOnShow: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.unsetAppOnShowCallback)\n                    HB.Event.unsetAppOnShowCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.unsetAppOnShowCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'unsetAppOnShow', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        unsetOnShow: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.unsetOnShowCallback)\n                    HB.Event.unsetOnShowCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.unsetOnShowCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'unsetOnShow', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        unsetPageOnHide: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.unsetPageOnHideCallback)\n                    HB.Event.unsetPageOnHideCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.unsetPageOnHideCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'unsetPageOnHide', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        unsetPageOnShow: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.Event.unsetPageOnShowCallback)\n                    HB.Event.unsetPageOnShowCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.Event.unsetPageOnShowCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'Event', 'unsetPageOnShow', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n    HB_f45b941.prototype.InputHistory = {\n        addHistory: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.InputHistory.addHistoryCallback)\n                    HB.InputHistory.addHistoryCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.InputHistory.addHistoryCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'InputHistory', 'addHistory', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n        deleteHistory: function() {\n            try {\n                var id = _getId(),\n                    args = [];\n                if (!HB.InputHistory.deleteHistoryCallback)\n                    HB.InputHistory.deleteHistoryCallback = {};\n                for (var i in arguments) {\n                    var name = id + '_p_' + i,\n                        item = arguments[i],\n                        l = {};\n                    _parseFunction(item, name, l);\n                    for (var k in l) {\n                       HB.InputHistory.deleteHistoryCallback[k] = l[k];\n                    };\n                    args.push({\n                        type: _getType(item),\n                        name: name,\n                        value: item\n                    })\n                };\n\n                var r = _callJava(id, 'InputHistory', 'deleteHistory', args);\n                if (r && r.success) {\n                    return r.msg;\n                } else {\n                    _err(r.msg);\n                }\n            } catch (e) {\n                _err(e);\n            };\n        },\n    };\n};\nwindow.HB = new HB_f45b941();\nHB.onHBReady();"
	],
	"packageName":"com.comingx.zanao"
}